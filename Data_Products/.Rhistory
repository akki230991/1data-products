xlab="Duration minutes",
ylab="Cumulative eruptions")
lines(breaks, cumfreq0)
help(lines)
stem(duration)
duration=faithful$eruption
waiting=faithful$waiting
plot(duration, waiting,
xlab="eruption duration",
ylab="Time waited")
abline(lm(waiting~duration))
q()
duration
mean(duration)
boxplot(duration,horizontal=TRUE)
waiting
cov(duration,waiting)
q()
runif(10,min=1,max=2)
q()
mean(duration)
sd(duration)
pnorm(84,mean=72,sd=15.2,lower.tail=FALSE)
qf(0.95,df1=5,df2=2)
help(mean)
help(na.omit)
help(qnorm)
help(pbar)
help(qbar)
help(prop.test)
q()
q()
help(qnorm)
help(qnorm)
library)MASS)
library(MASS)
head(immer)
immer$Y1
t.test(immer$Y1,immer$Y2,paired=True)
t.test(immer$Y1, immer$Y2, paired = True)
t.test(immer$Y1, immer$Y2, paired = TRUE)
head(mtcars)
q()
help(sapply)
help(class)
y<-data.frame(a=1,b='1')
y<-data.frame(a=1,b="a")
dput(y)
dput(y,file="y.R")
new.y<-dget("y.R")
new.y
q()
x<-matrix(1:6,7,8)
x<-matrix(1:6,2,3)
x
q()
make.negloglik<-function(data,fixed=c(FALSE,FALSE)){
params<-fixed
function(p){
params[!fixed]<-p
mu<-params[1]
sigma<-params[2]
a<--0.5*length(data)*log(2*pi*sigma^2)
b<- -0.5*sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.negloglik
q()
set.seed(1);
normals<-rnorm(100,1,2)
nLL<-make.negloglik(normals)
nll
nLL
ls(environment(nLL))
rnorm(100,1,2)
rnorm(100,1,2)
rnorm(100,1,2)
help(seq)
help(sapply)
q()
matrix(1:6,3,2)
array(rnorm(2*2*10),c(2,2,210))
q()
x<-c(rnorm(10),runif(10),rnorm(10,1))
x
f<-gl(3,10)
f
help(gl)
tapply(x,f,mean)
help(mean)
sapply(x,mean)
lapply(x,mean)
xx<-list(rnorm(10),runif(10),rnorm(10,1))
lapply(xx,mean)
tapply(x,f,mean)
q()
q()
library("fportfolio")
library("fPortfolio")
install.packages("fPortfolio")
library("fPortfolio")
library('fPortfolio')
library("fPortfolio")
library("fPortfolio")
library("fPortfolio")
install.packages("Rglpk")
library("fPortfolio")
library("fPortfolio")
data= SPISECTOR.RET
head(data)
library("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
help("charts.PerformanceSummary")
charts.PerformanceSummary(data2006,colorset=rich12equal)
data2006 = windows(data, start=as.Date("2006-01-01"), end=as.Date("2006-12-31"))
data2006 = windows(data, start(as.Date("2006-01-01")), end(as.Date("2006-12-31"))
data2006 = windows(data, start(as.Date("2006-01-01")), end(as.Date("2006-12-31")))
data2006 = windows(data, start("2006-01-01"), end("2006-12-31"))
data2006 = windows(data, start=as.Date("2006-01-01"), end=as.Date("2006-12-31"))
help("start")
data2006 = windows(data, start = as.Date("2006-01-01"), end=as.Date("2006-12-31"))
head(data)
help("windows")
data2006 = window(data, start = as.Date("2006-01-01"), end=as.Date("2006-12-31"))
charts.PerformanceSummary(data2006,colorset=rich12equal)
pdf("summary2006.pdf")
charts.PerformanceSummary(data2006,colorset=rich12equal)
charts.PerformanceSummary(data2006[,1:6],colorset=rich6equal)
charts.PerformanceSummary(data2006[,1:6],colorset=redfocus)
dev.off()
library("tseries")
res=portfolio.optim(data)
head(res)
res$pw
head(res)
res$pw
barplot(res$pw)
?ceiling
?round
?par
portfolio
portfolio=res$pw
eps=0.02
portfolio[which(portfolio<eps)]=0
portfolio=portfolio/sum(portfolio)
ylim_max=max(ceiling)
ylim_max=max(ceiling(portfolio*10)/10)+0.1
portfolio_bar<-barplot(portfolio,names.arg = names(data),ylim = c(0,ylim_max),col="#6699cc")
text(x=portfolio_bar,y=portfolio+par("cxy")[2],round(portfolio,4)*100,xpd=TRUE)
head(data)
load("~/.RData")
head(data)
library("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
help("charts.PerformanceSummary")
charts.PerformanceSummary(data2006,colorset=rich12equal)
data2006 = windows(data, start=as.Date("2006-01-01"), end=as.Date("2006-12-31"))
data2006 = windows(data, start(as.Date("2006-01-01")), end(as.Date("2006-12-31"))
data2006 = windows(data, start(as.Date("2006-01-01")), end(as.Date("2006-12-31")))
data2006 = windows(data, start("2006-01-01"), end("2006-12-31"))
data2006 = windows(data, start=as.Date("2006-01-01"), end=as.Date("2006-12-31"))
help("start")
data2006 = windows(data, start = as.Date("2006-01-01"), end=as.Date("2006-12-31"))
head(data)
help("windows")
data2006 = window(data, start = as.Date("2006-01-01"), end=as.Date("2006-12-31"))
charts.PerformanceSummary(data2006,colorset=rich12equal)
pdf("summary2006.pdf")
install.packages("PerformanceAnalytics")
data2006 = windows(data, start=as.Date("2006-01-01"), end=as.Date("2006-12-31"))
data2006 = windows(data, start = as.Date("2006-01-01"), end=as.Date("2006-12-31"))
data2006 = window(data, start = as.Date("2006-01-01"), end=as.Date("2006-12-31"))
data2006 = window(data, start = as.Date("2006-01-01"), end=as.Date("2006-12-31"))
library("PerformanceAnalytics")
data2006 = window(data, start = as.Date("2006-01-01"), end=as.Date("2006-12-31"))
library("PerformanceAnalytics")
library(“fPortfolio”)
library("fPortfolio")
setwd(dir = C:\Users\Ankit Gupta\Downloads\R)
setwd(dir = ~Users\Ankit Gupta\Downloads\R)
C:\Users\Ankit Gupta\Downloads\R
setwd("C:\Users\Ankit Gupta\Downloads\R"")
help(setwd)
getwd
getwd()
setwd("Downloads/R")
setwd("~/Downloads/R")
library(“fPortfolio”)
library("fPortfolio")
>library("fPortfolio")
library(“fPortfolio”)
library("fPortfolio")
data = SPISECTOR.RET
head(data)
library("PerformanceAnalytics")
data2006 = window(data, start = as.Date("2006-01-01"), end=as.Date("2006-12-31"))
charts.PerformanceSummary(data2006,colorset=rich12equal)
charts.PerformanceSummary(data2006,colorset=rich12equal)
charts.PerformanceSummary(data2006[,1:6],colorset=rich6equal)
charts.PerformanceSummary(data2006[,1:6],colorset=redfocus)
pdf("summary2006.pdf")
dev.off()
SPISECTOR.RET
SPISECTOR.RET
help(SPISECTOR.RET)
library("tseries")
res=portfolio.optim(data)
portfolio = res$pw
barplot(portfolio)
barplot(portfolio, names.arg = names(data))
barplot(portfolio)
barplot(portfolio, names.arg = names(data), col = "#6699cc")
portfolio
portfolio
eps=0.02
portfolio[which(portfolio<eps)]=0
portfolio=portfolio/sum(portfolio)
ylim_max=max(ceiling(portfolio*10)/10)+0.1
portfolio_bar<-barplot(portfolio,names.arg = names(data),ylim = c(0,ylim_max),col="#6699cc")
text(x=portfolio_bar,y=portfolio+par("cxy")[2],round(portfolio,4)*100,xpd=TRUE)
pie(portfolio)
pie(portfolio, labels = names(data))
pie_labels = names(data)
pie_labels[which(portfolio == 0)] = NA
pie(portfolio, labels = pie_labels)
pie_labels = names(data)
pie_labels[which(portfolio == 0)] = NA
pie(portfolio, labels = names(data))
portfolio
pie_labels = names(data)
pie_labels[which(portfolio == 0)] = NA
pie(portfolio, labels = pie_labels)
pie(portfolio)
library("plotrix")
library("plotrix")
install.packages("plotrix")
library("plotrix")
pie3D(portfolio, main="Optimal Portfolio", labels=pie_labels[which(portfolio > 0)])
pie3D(portfolio, main="Optimal Portfolio", labels=pie_labels[which(portfolio > 0)])
library("fPortfolio")
assets = dim(data)[2]
assets
constraints <- C('LongOnly')
constraints <- c('LongOnly')
constraints <- c('minW[1:assets]=0', 'maxW[1:assets]=0.5')
constraints <- c('minW[1:assets]=0', 'maxW[1:assets]=0.5', 'minsumW[c("TELE", "TECH")]=0.10')
spec <- portfolioSpec()
setNFrontierPoints(spec) <-25
setSolver(spec)<- "solveRquadprog"
portfolioConstraints(data, spec, constraints)
frontier <- portfolioFrontier(data, spec, constraints)
print(frontier)
tailoredFrontierPlot(object = frontier)
weightsPlot(frontier)
weightsPlot(frontier, col = rainbow(assets))
weightsPlot(frontier, col = heat.colors(assets))
install.packages("quantmod")
library("quantmod")
getSymbols("AAPL")
chartSeries(AAPL,theme="white")
chartSeries(AAPL)
chartSeries(AAPL,theme="white")
source("qmif.R")
DJIA <- c("AA", "AXP", "BA", "BA", "BAC", "CAT", "CSCO", "CVX", "DD", "DIS", "GE", "HR", "HPQ", "IBM", "JNJ", "INTC", "JPM", "KFT", "KO", "MCD")
data <- daily_returns(DJIA, "2011-10-01", "2012-09-30")
DJIA <- c("AA", "AXP", "BA", "BAC", "CAT", "CSCO", "CVX", "DD", "DIS", "GE", "HD", "HPQ", "IBM", "INTC", "JNJ", "JPM", "KO", "MCD", "MMM", "MRK", "MSFT", "PFE", "PG", "T", "TRV", "UNH", "UTX", "VZ", "WMT", "XOM")
daily_re
data <- dailyreturn(ticker, "2011-10-01", "2012-09-30")
data <- dailyreturn(ticker, "2011-10-01", "2012-09-30")
data <- dailyReturn(ticker, "2011-10-01", "2012-09-30")
data <- dailyReturn(DJIA, "2011-10-01", "2012-09-30")
DJIA <- c("AA", "AXP", "BA", "BAC", "CAT", "CSCO", "CVX", "DD", "DIS", "GE", "HD", "HPQ", "IBM", "INTC", "JNJ", "JPM", "KO", "MCD", "MMM", "MRK", "MSFT", "PFE", "PG", "T", "TRV", "UNH", "UTX", "VZ", "WMT", "XOM")
data <- dailyReturn(DJIA, "2011-10-01", "2012-09-30")
?dailyReturn
source("qmif.R")
daily_returns
?daily_returns
data <- dailyReturn(DJIA, subset = "2011-10-01:2012-09-30")
data <- dailyReturn(DJIA, subset = "2011-10-01:2012-09-30")
data <- dailyReturn(AAPL, subset = "2011-10-01:2012-09-30")
data
data
ticker
DJIA <- c("AA", "AXP", "BA", "BAC", "CAT", "CSCO", "CVX", "DD", "DIS", "GE", "HD", "HPQ", "IBM", "INTC", "JNJ", "JPM", "KO", "MCD", "MMM", "MRK", "MSFT", "PFE", "PG", "T", "TRV", "UNH", "UTX", "VZ", "WMT", "XOM")
ticker <- c("AA", "AXP", "BA", "BAC", "CAT", "CSCO", "CVX", "DD", "DIS", "GE", "HD", "HPQ", "IBM", "INTC", "JNJ", "JPM", "KO", "MCD", "MMM", "MRK", "MSFT", "PFE", "PG", "T", "TRV", "UNH", "UTX", "VZ", "WMT", "XOM")
data <- dailyReturn(ticker, subset = "2011-10-01:2012-09-30")
ticker
chartSeries(ticker)
chartSeries(AA)
chartSeries(AAPL)
chartSeries(AXP)
ticker <- c("DJIA", "^GDAXI", "^ATX")
data <- dailyReturn(ticker, subset = "2011-10-01:2012-09-30")
data <- dailyReturn(AAPL, subset = "2011-10-01:2012-09-30")
Data
data
getSymbols("AAPL")
getSymbols("AA")
library("quantmod")
getSymbols("AAPL")
getSymbols("AAPL", env=globalenv())
getSymbols("AAPL", src="yahoo", env=e)
getSymbols("AAPL", src="yahoo", env=globalenv())
getSymbols("AAPL", auto.assign=FALSE)
AAPL
data <- dailyReturn(AAPL, subset = "2011-10-01:2012-09-30")
data
head(data)
library("quantmod")
getSymbols("GOOG", src = "yahoo")
chartSeries(GOOG,theme="white")
chartSeries(GOOG)
source("qmif.R")
ticker <- c("DJIA", "^GDAXI", "^ATX")
getSymbols(ticker)
data <- dailyReturn(ticker, subset = "2011-10-01:2012-09-30")
DJIA <- c("AA", "AXP", "BA", "BAC", "CAT", "CSCO", "CVX", "DD", "DIS", "GE", "HD", "HPQ", "IBM", "INTC", "JNJ", "JPM", "KO", "MCD", "MMM", "MRK", "MSFT", "PFE", "PG", "T", "TRV", "UNH", "UTX", "VZ", "WMT", "XOM")
getSymbols(DJIA)
head(DJIA)
DJIA
data <- dailyReturn(DJIA, subset = "2011-10-01:2012-09-30")
chartSeries(DJIA)
chartSeries(GOOG,theme="white")
head(GOOG)
data <- dailyReturn(GOOG, subset = "2011-10-01:2012-09-30")
DATA
data
data <- dailyReturn(GOOG)
data
head(data)
?subset
?subset.xts
data <- dailyReturn(GOOG, subset.xts = "2011-10-01:2012-09-30")
data
DJIA <- c("AA", "AXP", "BA", "BAC", "CAT", "CSCO", "CVX", "DD", "DIS", "GE", "HD", "HPQ", "IBM", "INTC", "JNJ", "JPM", "KO", "MCD", "MMM", "MRK", "MSFT", "PFE", "PG", "T", "TRV", "UNH", "UTX", "VZ", "WMT", "XOM")
getSymbols(DJIA)
data <- dailyReturn(DJIA, subset.xts = "2011-10-01:2012-09-30")
data <- dailyReturn(ticker, subset.xts = "2011-10-01:2012-09-30")
data <- dailyReturn(GOOG, subset.xts = "2011-10-01:2012-09-30")
data
data <- dailyReturn(GOOG, subset.xts = "2014-11-01:2015-10-31")
head(data)
data <- dailyReturn(GOOG)
head(data)
data <- dailyReturn(DJIA)        #######(, subset.xts = "2014-11-01:2015-10-31")
load("C:/Users/Ankit Gupta/Documents/.RData")
md
a<- available.packages()
head(rownames(a),3)
install.packages(KernSmooth)
?install.packages
install.packages("KernSmooth")
library(KernSmooth)
x<-1/0
x
x<-1L
x
class(x)
x<-matrix(c(1,2,3,4,5,6),nrow = 2, ncol = 3, byrow = TRUE)
x
dimnames(x)<-list(+)
dimnames(x)<-list(+c("row1","row2")+c("col1","col2","col3"))
dimnames(x)<-list(
c("row1","row2")c("col1","col2","col3"))
dimnames(x)<-list(
c("row1","row2")
c("col1","col2","col3"))
dimnames(x)<-list(
c("row1","row2"),
c("col1","col2","col3"))
x
sudo apt-get install libcurl4-openssl-dev
install.packages("swirl")
library(swirl)
q()
install.packages("fancyvrb")
install.packages("fancyvrb")
install.packages("fancyvrb")
rm(list=ls(all=TRUE))
library(ggplot2)
library(knitr)
lambda = 0.2
n = 40
nosim = 1000
set.seed(4142)
exp_sim <- function(n, lambda)
{
mean(rexp(n,lambda))
}
sim <- data.frame(ncol=2,nrow=1000)
names(sim) <- c("Index","Mean")
for (i in 1:nosim)
{
sim[i,1] <- i
sim[i,2] <- exp_sim(n,lambda)
}
sample_mean <- mean(sim$Mean)
theor_mean <- 1/lambda
hist(sim$Mean,
breaks=100,
prob=TRUE,
main="Exponential Distribution n = 1000",
xlab="Spread")
abline(v = theor_mean,
col= 4,
lwd = 2)
abline(v = sample_mean,
col = 6,
lwd = 2)
legend('topright', c("Sample Mean", "Theoretical Mean"),
lty=c(1,1),
bty = "n",
col = c(col=4, col=6))
install.packages("shiny")
library(shiny)
library(manipulate)
version
load("C:/Users/Ankit Gupta/Downloads/loansData.rda")
Sys.getenv('PATH')
system('g++ -v')
getwd()
setwd("../")
setwd("./Des*")
setwd("./Desktop")
setwd("./Data Science/data/Data Products")
setwd("../")
setwd("./Data Products")
getwd()
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/data/data products')
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/data/data products')
runApp()
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/data/data products')
runApp()
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/data/data products')
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/data/data products')
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/data/data products')
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/data/data products')
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/courses-master/09_DevelopingDataProducts/shiny2/testApp')
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/courses-master/09_DevelopingDataProducts/shiny2/testApp')
x<-0
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/courses-master/09_DevelopingDataProducts/shiny2/testApp')
runApp(display.mode = 'showcase')
install.packages("rCharts")
ap<- available.packages()
ap
View(ap)
"rCharts" %in% rownames(ap)
install.packages("RCALI")
require(devtools)
install.packages("devtools")
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/data/data products')
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/data/data products')
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/data/data products')
data(mtcars)
modelFit <- lm(mpg ~ hp + cyl + wt, data=mtcars)
head(modelFit)
runApp()
** Shiny Application to model the effect of horsepower, number of cylinders, and weight on the mpg **
================================================================================
devtools::install_github('rstudio/rsconnect')
library(rsconnect)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='akki230991', token='9792A0C200E07727BE4F0D208A7B0A9D', secret='Bqbladls2hjotMIiPMXfBuIUe1sRF29ycOyEpnnw')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
shinyapps::deployApp('C:/Users/Ankit Gupta/Desktop/Data Science/data/Data Products')
runApp()
shinyapps::deployApp('C:/Users/Ankit Gupta/Desktop/Data Science/data/Data Products/UI.R')
library(rsconnect)
deployApp()
runApp(display.mode = TRUE)
runApp()
runApp()
deployApp(appName="APPNAME")
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/data/data products')
install.packages(Rtools)
deployApp(appName="mpg_prediction")
getwd()
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/data/data products')
install.packages("Rcpp")
install.packages("Rcpp")
shiny::runApp('C:/Users/Ankit Gupta/Desktop/Data Science/data/data products')
install_github('slidify','ramnathv')
library(dev'')
library(devtools)
library(dev'')
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv/slidify')
install_github('slidifyLibraries','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
getwd()
author("Ankit Gupta")
author("Data_Products")
getwd()
setwd("../..")
getwd()
author("Data_Products")
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
browseURL('index.html')
git clone https://github.com/akki230991/Developing-Data-Products.git
datasets::mtcars
library(datasets)
data("mtcars")
